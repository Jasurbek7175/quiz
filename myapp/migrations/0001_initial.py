# Generated by Django 4.2.17 on 2025-01-04 06:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        unique=True,
                        verbose_name="Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.CreateModel(
            name="Quiz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=60, verbose_name="Title")),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="a description of the quiz",
                        verbose_name="Description",
                    ),
                ),
                (
                    "url",
                    models.SlugField(
                        help_text="a user friendly url",
                        max_length=60,
                        verbose_name="user friendly url",
                    ),
                ),
                (
                    "random_order",
                    models.BooleanField(
                        default=False,
                        help_text="Display the questions in a random order or as they are set?",
                        verbose_name="Random Order",
                    ),
                ),
                (
                    "max_questions",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of questions to be answered on each attempt.",
                        null=True,
                        verbose_name="Max Questions",
                    ),
                ),
                (
                    "answers_at_end",
                    models.BooleanField(
                        default=False,
                        help_text="Correct answer is NOT shown after question. Answers displayed at the end.",
                        verbose_name="Answers at end",
                    ),
                ),
                (
                    "exam_paper",
                    models.BooleanField(
                        default=False,
                        help_text="If yes, the result of each attempt by a user will be stored. Necessary for marking.",
                        verbose_name="Exam Paper",
                    ),
                ),
                (
                    "single_attempt",
                    models.BooleanField(
                        default=False,
                        help_text="If yes, only one attempt by a user will be permitted. Non users cannot sit this exam.",
                        verbose_name="Single Attempt",
                    ),
                ),
                (
                    "pass_mark",
                    models.SmallIntegerField(
                        blank=True,
                        default=0,
                        help_text="Percentage required to pass exam.",
                        validators=[django.core.validators.MaxValueValidator(100)],
                        verbose_name="Pass Mark",
                    ),
                ),
                (
                    "success_text",
                    models.TextField(
                        blank=True,
                        help_text="Displayed if user passes.",
                        verbose_name="Success Text",
                    ),
                ),
                (
                    "fail_text",
                    models.TextField(
                        blank=True,
                        help_text="Displayed if user fails.",
                        verbose_name="Fail Text",
                    ),
                ),
                (
                    "draft",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="If yes, the quiz is not displayed in the quiz list and can only be taken by users who can edit quizzes.",
                        verbose_name="Draft",
                    ),
                ),
                (
                    "time",
                    models.IntegerField(help_text="Time for quiz", verbose_name="Time"),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quizs",
                        to="myapp.category",
                        verbose_name="Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Quiz",
                "verbose_name_plural": "Quizzes",
            },
        ),
        migrations.CreateModel(
            name="Sitting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_order",
                    models.CharField(
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                        verbose_name="Question Order",
                    ),
                ),
                (
                    "question_list",
                    models.CharField(
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                        verbose_name="Question List",
                    ),
                ),
                (
                    "incorrect_questions",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                        verbose_name="Incorrect questions",
                    ),
                ),
                ("current_score", models.IntegerField(verbose_name="Current Score")),
                (
                    "complete",
                    models.BooleanField(default=False, verbose_name="Complete"),
                ),
                (
                    "user_answers",
                    models.TextField(
                        blank=True, default="{}", verbose_name="User Answers"
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(auto_now_add=True, verbose_name="Start"),
                ),
                (
                    "end",
                    models.DateTimeField(blank=True, null=True, verbose_name="End"),
                ),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="myapp.quiz",
                        verbose_name="Quiz",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "figure",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="media/%Y/%m/%d",
                        verbose_name="Figure",
                    ),
                ),
                (
                    "content",
                    models.CharField(
                        help_text="Enter the question text that you want displayed",
                        max_length=1000,
                        verbose_name="Question",
                    ),
                ),
                (
                    "explanation",
                    models.TextField(
                        blank=True,
                        help_text="Explanation to be shown after the question has been answered.",
                        max_length=2000,
                        verbose_name="Explanation",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="myapp.category",
                        verbose_name="Category",
                    ),
                ),
                (
                    "quiz",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="myapp.quiz",
                        verbose_name="Quiz",
                    ),
                ),
            ],
            options={
                "verbose_name": "Question",
                "verbose_name_plural": "Questions",
                "ordering": ["category"],
            },
        ),
        migrations.CreateModel(
            name="Progress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "score",
                    models.CharField(
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                        verbose_name="Score",
                    ),
                ),
                (
                    "correct_answer",
                    models.CharField(max_length=10, verbose_name="Correct Answers"),
                ),
                (
                    "wrong_answer",
                    models.CharField(max_length=10, verbose_name="Wrong Answers"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Progress",
                "verbose_name_plural": "User progress records",
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("telephone", models.CharField(blank=True, max_length=15, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="customuser_set",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="customuser_set",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content",
                    models.CharField(
                        help_text="Enter the answer text that you want displayed",
                        max_length=1000,
                        verbose_name="Content",
                    ),
                ),
                (
                    "correct",
                    models.BooleanField(
                        default=False,
                        help_text="Is this a correct answer?",
                        verbose_name="Correct",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answer",
                        to="myapp.question",
                        verbose_name="Question",
                    ),
                ),
            ],
            options={
                "verbose_name": "Answer",
                "verbose_name_plural": "Answers",
            },
        ),
    ]
